generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int    @id @default(autoincrement())
  address String @unique
  tasks   Task[]
}

model Worker {
  id             Int          @id @default(autoincrement())
  address        String       @unique
  submissions    Submission[]
  pending_amount String // amount in lamports (* 10^9)
  locked_amount  String
  withdrawn      String       @default("0") // Added field with default value of 0
  payouts        Payouts[]
}

model Task {
  id             Int          @id @default(autoincrement())
  category       Category     @default(Miscellaneous)
  user_id        Int
  worker_id      Json[]
  votes          Int          @default(0)
  signature      String
  amount         String
  status         Boolean      @default(false)
  done           Boolean      @default(false)
  user           User         @relation(fields: [user_id], references: [id])
  submissions    Submission[]
  postDate       Int
  postMonth      Int
  postYear       Int
  Voting_Type_id Int? // Foreign key for Voting Type
  Voting_Type    Voting_Type? @relation(fields: [Voting_Type_id], references: [id])

  uiUxDesign_id Int? // Foreign key for UI/UX Design
  uiUxDesign    UI_UX_Design? @relation(fields: [uiUxDesign_id], references: [id])

  ideaProduct_id Int? // Foreign key for Idea/Product
  ideaProduct    Idea_Product? @relation(fields: [ideaProduct_id], references: [id])

  youtubeThumbnail_id Int? // Foreign key for Youtube Thumbnail
  youtubeThumbnail    Youtube_Thumbnail? @relation(fields: [youtubeThumbnail_id], references: [id])

  miscellaneous_id Int? // Foreign key for Miscellaneous
  miscellaneous    Miscellaneous? @relation(fields: [miscellaneous_id], references: [id])

  data_labelling_id Int? // Foreign key for Data Labelling
  data_labelling    Data_Labelling? @relation(fields: [data_labelling_id], references: [id])
}

model UI_UX_Design {
  id                 Int      @id @default(autoincrement())
  Design_Title       String
  Design_Description String?
  Design_Url         String[]
  Voting_Type        String
  Responses          Json     @default("[{\"id\": \"worker_id\", \"value\": \"Five_Star\"}]")

  Task Task[]
}

model Idea_Product {
  id               Int      @id @default(autoincrement())
  Idea_Title       String
  Idea_Description String?
  Idea_Images      String[]
  Voting_Type      String
  Responses        Json     @default("[{\"id\": \"worker_id\", \"value\": \"Five_Star\"}]")

  Task   Task[]
  Option Option[]
}

model Youtube_Thumbnail {
  id                       Int      @id @default(autoincrement())
  Youtube_Thumbnail_Title  String
  Youtube_Thumbnail_Images String[]
  Voting_Type              String
  Responses                Json     @default("[{\"id\": \"worker_id\", \"value\": \"Five_Star\"}]")

  Task   Task[]
  Option Option[]
}

model Miscellaneous {
  id          Int      @id @default(autoincrement())
  title       String
  Images      String[]
  Description String
  Design_Url  String[]
  Voting_Type String
  Responses   Json     @default("[{\"id\": \"worker_id\", \"value\": \"Five_Star\"}]")

  Task   Task[]
  Option Option[]
}

model Data_Labelling {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image_url   String[]
  Responses   Json     @default("[{\"id\": \"worker_id\", \"value\": \"Five_Star\"}]")

  Task   Task[]
  option Option[]
}

model Voting_Type {
  id   Int          @id @default(autoincrement())
  type Voting_Types @default(Rating_Scale)

  Task Task[]

  rating_ScaleId Int?
  Rating_Scale   Rating_Scale? @relation(fields: [rating_ScaleId], references: [id])

  pollId Int?
  Poll   Poll? @relation(fields: [pollId], references: [id])

  upvote_DownvoteId Int?
  Upvote_Downvote   Upvote_Downvote? @relation(fields: [upvote_DownvoteId], references: [id])

  emoji_ReactionId Int?
  Emoji_Reaction   Emoji_Reaction? @relation(fields: [emoji_ReactionId], references: [id])
}

model Rating_Scale {
  id         Int    @id @default(autoincrement())
  Five_Star  String @default("‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ")
  Four_Star  String @default("‚òÖ‚òÖ‚òÖ‚òÖ")
  Three_Star String @default("‚òÖ‚òÖ‚òÖ")
  Two_Star   String @default("‚òÖ‚òÖ")
  One_Star   String @default("‚òÖ")

  Voting_Type Voting_Type[]
}

model Poll {
  id      Int    @id @default(autoincrement())
  option1 String @default("Option 1")
  option2 String @default("Option 2")
  option3 String @default("Option 3")
  option4 String @default("Option 4")

  Voting_Type Voting_Type[]
}

model Upvote_Downvote {
  id       Int    @id @default(autoincrement())
  Upvote   String @default("‚¨Ü")
  Downvote String @default("‚¨á")

  Voting_Type Voting_Type[]
}

model Emoji_Reaction {
  id      Int    @id @default(autoincrement())
  Emoji_1 String @default("üòç")
  Emoji_2 String @default("üòÇ")
  Emoji_3 String @default("üò≤")
  Emoji_4 String @default("üò°")

  Voting_Type Voting_Type[]
}

model Option {
  id          Int     @id @default(autoincrement())
  image_url   String?
  website_url String?
  // submissions Submission[]

  Idea_Product_id Int? // Foreign key for Idea/Product
  Idea_Product    Idea_Product? @relation(fields: [Idea_Product_id], references: [id])

  Youtube_Thumbnail_id Int? // Foreign key for Youtube Thumbnail
  Youtube_Thumbnail    Youtube_Thumbnail? @relation(fields: [Youtube_Thumbnail_id], references: [id])

  Miscellaneous_id Int? // Foreign key for Miscellaneous
  Miscellaneous    Miscellaneous? @relation(fields: [Miscellaneous_id], references: [id])

  Data_Labelling_id Int? // Foreign key for Data Labelling
  Data_Labelling    Data_Labelling? @relation(fields: [Data_Labelling_id], references: [id])
}

model Submission {
  id        Int    @id @default(autoincrement())
  worker_id Int
  worker    Worker @relation(fields: [worker_id], references: [id])
  task_id   Int //! for category in submission
  task      Task   @relation(fields: [task_id], references: [id])
  amount    String
  postDate  Int // Day the submission was made
  postMonth Int // Month the submission was made
  postYear  Int // Year the submission was made

  @@unique([worker_id, task_id])
}

model Payouts {
  id        Int       @id @default(autoincrement())
  worker_id Int
  worker    Worker    @relation(fields: [worker_id], references: [id])
  amount    String
  signature String?
  status    TxnStatus
  date      DateTime  @default(now())
  month     Int
  year      Int

  @@index([worker_id])
}

enum TxnStatus {
  Processing
  Success
  Failure
}

enum Category {
  UI_UX_Design
  Idea_Product
  Youtube_Thumbnail
  Miscellaneous
  Data_Labelling
}

enum Voting_Types {
  Rating_Scale
  Emoji_Reaction
  Upvote_Downvote
  Poll
}
